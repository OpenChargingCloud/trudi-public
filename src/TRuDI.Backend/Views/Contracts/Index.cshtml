@using TRuDI.Backend.Application
@using TRuDI.Backend.Utils
@using TRuDI.HanAdapter.Interface
@using TRuDI.Models
@inject ApplicationState StateService
@{
    ViewData["Title"] = "Verträge";
    int contractIndex = 0;
}

@foreach (var cnt in StateService.Contracts)
{
    var hasParamErrors = false;

    <div class="panel panel-primary">
    
        @if (!string.IsNullOrWhiteSpace(cnt.Contract.MeteringPointId))
        {
            <div class="panel-heading">Zählpunkt @cnt.Contract.MeteringPointId</div>
        }
        else
        {
            hasParamErrors = true;
            <div class="error">Zählpunkt: (Parameterierung nicht vollständig)</div>
        }
    <div class="panel-body">

    <table class="table">

        <tr>
            <th>Tarifbezeichnung</th>

            @if (!string.IsNullOrWhiteSpace(cnt.Contract.TafName))
            {
                <td>@cnt.Contract.TafName</td>
            }
            else
            {
                hasParamErrors = true;
                <td class="error">Parameterierung des Smart Meter Gateways nicht vollständig</td>
            }
        </tr>

        <tr>
            <th>Energieart</th>
            <td>@cnt.Contract.GetMedium()</td>
        </tr>

        <tr>
            <th>Tarifanwendungsfall</th>
            <td>@cnt.Contract.TafId.TafToFriendlyName()</td>
        </tr>

        @if (!string.IsNullOrWhiteSpace(cnt.Contract.Description))
        {
            <tr>
                <th>Beschreibung</th>
                <td>@cnt.Contract.Description</td>
            </tr>
        }

        <tr>
            <th>ID des Kunden</th>

            @if (!string.IsNullOrWhiteSpace(cnt.Contract.ConsumerId))
            {
                <td>@cnt.Contract.ConsumerId</td>
            }
            else
            {
                hasParamErrors = true;
                <td class="error">Parameterierung des Smart Meter Gateways nicht vollständig</td>
            }
        </tr>

        <tr>
            <th>ID des Rechnungsstellers</th>
            @if (!string.IsNullOrWhiteSpace(cnt.Contract.SupplierId))
            {
                <td>@cnt.Contract.SupplierId</td>
            }
            else
            {
                hasParamErrors = true;
                <td class="error">Parameterierung des Smart Meter Gateways nicht vollständig</td>
            }
        </tr>

        <tr>
            <th>Vertragsbeginn</th>
            <td>@cnt.Contract.Begin.ToFormatedString()</td>
        </tr>

        <tr>
            <th>Vertragsende</th>
            <td>@cnt.Contract.End.ToFormatedString()</td>
        </tr>

        <tr>
            <th>
                Zähler
            </th>

            @if (cnt.Contract.Meters == null || cnt.Contract.Meters.Count == 0)
            {
                hasParamErrors = true;
                <td class="error">Parameterierung des Smart Meter Gateways nicht vollständig</td>
            }
            else
            {
                <td>
                    @foreach (var meter in cnt.Contract.Meters)
                    {
                        @meter.ToFormattedDeviceId()<br />
                    }
                </td>
            }
        </tr>

    </table>

    @{
        var dtpIdStart = $"dtp_start_{contractIndex}";
        var dtpIdEnd = $"dtp_end_{contractIndex}";

        var hasBillingPeriods = false;
    }

    <form>
        @if (cnt.Contract.BillingPeriods != null && cnt.Contract.BillingPeriods.Count > 0)
        {
            int billingPeriodIndex = 0;
            hasBillingPeriods = true;

            <h3>Abrechnungsperioden</h3>

            <table class="table">

                <tr>
                    <th></th>
                    <th>Von</th>
                    <th>Bis</th>
                    <th>Abgeschlossen</th>
                </tr>

                @foreach (var period in cnt.Contract.BillingPeriods)
                {
                    <tr id="@string.Format("{0}_{1}_BP", contractIndex, billingPeriodIndex)">
                        <td>
                            <input type="radio"
                                   name='@string.Format("{0}", contractIndex)'
                                   value='@string.Format("{0}_{1}", contractIndex, billingPeriodIndex)'
                                   onclick="selectBillingPeriod(@contractIndex, @billingPeriodIndex, '@period.Begin.ToIso8601()', '@period.End.GetEndTimeOrNow().RoundDown(15).ToIso8601()', 'BP');">
                        </td>
                        <td>@period.Begin.ToFormatedString()</td>
                        <td>@period.End.ToFormatedString()</td>
                        <td>@period.IsCompleted()</td>
                    </tr>

                    billingPeriodIndex++;
                }
            </table>
        }
        
        @if (cnt.Taf6?.BillingPeriods != null && cnt.Taf6.BillingPeriods.Count > 0)
        {
            int billingPeriodIndex = 0;
            hasBillingPeriods = true;

            <h3>Tageswerte</h3>

            <table class="table">

                <tr>
                    <th></th>
                    <th>Von</th>
                    <th>Bis</th>
                    <th>Abgeschlossen</th>
                </tr>

                @foreach (var period in cnt.Taf6.BillingPeriods)
                {
                    <tr id="@string.Format("{0}_{1}_TAF6", contractIndex, billingPeriodIndex)">
                        <td>
                            <input type="radio"
                                   name='@string.Format("{0}", contractIndex)'
                                   value='@string.Format("{0}_{1}", contractIndex, billingPeriodIndex)'
                                   onclick="selectBillingPeriod(@contractIndex, @billingPeriodIndex, '@period.Begin.ToIso8601()', '@period.End.GetEndTimeOrNow().RoundDown(15).ToIso8601()', 'TAF6');">
                        </td>
                        <td>@period.Begin.ToFormatedString()</td>
                        <td>@period.End.ToFormatedString()</td>
                        <td>@period.IsCompleted()</td>
                    </tr>

                    billingPeriodIndex++;
                }
            </table>
        }

    </form>

        @if (cnt.Contract.Begin <= DateTime.Now)
        {
            if (hasBillingPeriods || cnt.Contract.TafId == TafId.Taf7)
            {
                <table class="table-condensed">
                    <tr>
                        <th>Startzeitpunkt der Ablesung</th>
                        <th>Endzeitpunkt der Ablesung</th>
                        <th></th>
                    </tr>
                    <tr>
                        <td>
                            <div class="form-group">
                                <div class='input-group date' id="@dtpIdStart">
                                    <input type='text' class="form-control"/>
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </td>

                        <td>
                            <div class="form-group">
                                <div class='input-group date' id="@dtpIdEnd">
                                    <input type='text' class="form-control"/>
                                    <span class="input-group-addon">
                                        <span class="glyphicon glyphicon-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </td>
                        <td>
                            <div class="form-group">
                                @if (cnt.Contract.TafId == TafId.Taf7)
                                {
                                    <button type="button" class="btn btn-default" id="btnRead" onclick="startReadingTaf7(@contractIndex);" @(hasParamErrors ? "disabled" : "")>Auslesung starten...</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-default" id="btnRead" onclick="startReading();" @(hasParamErrors ? "disabled" : "")>Auslesung starten...</button>
                                }
                            </div>
                        </td>
                    </tr>
                </table>
            }
            else
            {
                <div>
                    <p>Es sind keine Abrechnungsperioden vorhanden.</p>
                </div>
            }
        }
        else
        {
            <div>
                <p>Vertragsbeginn liegt in der Zukunft: eine Ablesung ist noch nicht möglich.</p>
            </div>
        }

    <script type="text/javascript">
        $(function () {
            $("#@dtpIdStart").datetimepicker({
                locale: 'de',
                format: 'DD.MM.YYYY'
            });
            $("#@dtpIdEnd").datetimepicker({
                useCurrent: false,
                locale: 'de',
                format: 'DD.MM.YYYY'
            });

            @if (cnt.Contract.TafId == TafId.Taf7)
            {
                <text>
                    $("#@dtpIdStart").data("DateTimePicker").minDate(moment('@cnt.Contract.Begin.DayStart().ToIso8601()'));
                    $("#@dtpIdStart").data("DateTimePicker").maxDate(moment('@cnt.Contract.End.GetEndTimeOrNow().DayStart().ToIso8601()'));
                    $("#@dtpIdStart").data("DateTimePicker").date(moment('@cnt.Contract.Begin.DayStart().ToIso8601()'));

                    $("#@dtpIdEnd").data("DateTimePicker").minDate(moment('@cnt.Contract.Begin.DayStart().ToIso8601()'));
                    $("#@dtpIdEnd").data("DateTimePicker").maxDate(moment('@cnt.Contract.End.GetEndTimeOrNow().DayEnd().ToIso8601()'));
                    $("#@dtpIdEnd").data("DateTimePicker").date(moment('@cnt.Contract.End.GetEndTimeOrNow().DayEnd().ToIso8601()'));
                </text>
            }
        });
    </script>

    </div>
    </div>

                    contractIndex++;
                }

<script type="text/javascript">

                var selectedContract = -1;
                var selectedBillingPeriod = -1;
                var selectedMode = '';

                function selectBillingPeriod(contractIndex, billingPeriodIndex, startTime, endTime, mode) {
                    console.log("start = " + startTime + ", end = " + endTime);

                    selectedContract = contractIndex;
                    selectedBillingPeriod = billingPeriodIndex;
                    selectedMode = mode;

                    $("#dtp_start_" + contractIndex).data("DateTimePicker").maxDate(false);
                    $("#dtp_start_" + contractIndex).data("DateTimePicker").minDate(false);
                    $("#dtp_start_" + contractIndex).data("DateTimePicker").maxDate(moment(startTime));

                    $("#dtp_end_" + contractIndex).data("DateTimePicker").minDate(false);
                    $("#dtp_end_" + contractIndex).data("DateTimePicker").maxDate(false);
                    $("#dtp_end_" + contractIndex).data("DateTimePicker").minDate(moment(endTime));

                    $("#dtp_start_" + contractIndex).data("DateTimePicker").date(moment(startTime));
                    $("#dtp_end_" + contractIndex).data("DateTimePicker").date(moment(endTime));
                }

                function startReading() {
                    if (selectedBillingPeriod == -1 || selectedContract == -1) {
                        return;
                    }

                    $.ajax({
                        url: '/Contracts/StartReadout',
                        type: "POST",
                        data:
                        "contractIndex=" + selectedContract +
                        "&billingPeriodIndex=" + selectedBillingPeriod +
                        "&startTime=" + encodeURIComponent($("#dtp_start_" + selectedContract).data("DateTimePicker").date().toISOString()) +
                        "&endTime=" + encodeURIComponent($("#dtp_end_" + selectedContract).data("DateTimePicker").date().toISOString()) +
                        "&mode=" + selectedMode,
                        contentType: 'application/x-www-form-urlencoded',
                        processData: false,
                        success: function (result) {
                            window.location.href = "/Progress";
                        },
                        error: function (err) { }
                    });
                }

                function startReadingTaf7(contractIndex) {

                    $.ajax({
                        url: '/Contracts/StartReadoutTaf7',
                        type: "POST",
                        data:
                        "contractIndex=" + contractIndex +
                        "&startTime=" + encodeURIComponent($("#dtp_start_" + contractIndex).data("DateTimePicker").date().toISOString()) +
                        "&endTime=" + encodeURIComponent($("#dtp_end_" + contractIndex).data("DateTimePicker").date().toISOString()),
                        contentType: 'application/x-www-form-urlencoded',
                        processData: false,
                        success: function (result) {
                            window.location.href = "/Progress";
                        },
                        error: function (err) { }
                    });
                }

</script>